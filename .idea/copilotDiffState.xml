<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Process.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Process.cpp" />
              <option name="originalContent" value="#include &quot;../include/Process.h&quot;&#10;&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;&#10;#include &quot;../include/D_Fetch.h&quot;&#10;#include &quot;../include/Requests.h&quot;&#10;#include &quot;../include/Config.h&quot;&#10;&#10;void Process::processCpf(std::string cpf) {&#10;    std::clog &lt;&lt; &quot;[STARTING PROCESS] - CPF: &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;    const Config cfg;&#10;    const auto&amp; env = cfg.getEnv();&#10;    Fetch db_consultas(env.db_consultas);&#10;    const Fetch db_search(env.db_search);&#10;    const Database db_storm(env.db_storm);&#10;    std::string login;&#10;    std::string password;&#10;    auto counted = db_consultas.countConsultas(env.acesso1.first, env.acesso2.first, env.acesso3.first, env.acesso4.first);&#10;    if (env.acesso1.first == counted) {&#10;        login = env.acesso1.first;&#10;        password = env.acesso1.second;&#10;    } else if (env.acesso2.first == counted) {&#10;        login = env.acesso2.first;&#10;        password = env.acesso2.second;&#10;    } else if (env.acesso3.first == counted) {&#10;        login = env.acesso3.first;&#10;        password = env.acesso3.second;&#10;    } else if (env.acesso4.first == counted) {&#10;        login = env.acesso4.first;&#10;        password = env.acesso4.second;&#10;    }&#10;&#10;    auto accessToken = Requests::GetAccessToken(login, password);&#10;    auto responseContent = Requests::GetApiReturn(accessToken-&gt;AuthenticationResult.AccessToken, cpf, env.apikey);&#10;    auto consultas = db_consultas.fetchConsultas(&amp;db_storm, cpf);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="#include &quot;../include/Process.h&quot;&#10;&#10;#include &lt;chrono&gt;&#10;#include &lt;iomanip&gt;&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;&#10;#include &quot;../include/D_Fetch.h&quot;&#10;#include &quot;../include/D_Insert.h&quot;&#10;#include &quot;../include/Requests.h&quot;&#10;#include &quot;../include/Config.h&quot;&#10;&#10;void Process::processCpf(std::string cpf) {&#10;    auto start = std::chrono::system_clock::now();&#10;    auto now = std::chrono::system_clock::to_time_t(start);&#10;    std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Starting processing for CPF: &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;&#10;    const Config cfg;&#10;    const auto&amp; env = cfg.getEnv();&#10;    Fetch db_consultas(env.db_consultas);&#10;    Fetch db_search(env.db_search);&#10;    Database db_storm(env.db_storm);&#10;    std::string login;&#10;    std::string password;&#10;    std::string loginName;&#10;    auto counted = db_consultas.countConsultas(env.acesso1.first, env.acesso2.first, env.acesso3.first, env.acesso4.first);&#10;    if (env.acesso1.first == counted) {&#10;        login = env.acesso1.first;&#10;        password = env.acesso1.second;&#10;        loginName = login;&#10;    } else if (env.acesso2.first == counted) {&#10;        login = env.acesso2.first;&#10;        password = env.acesso2.second;&#10;        loginName = login;&#10;    } else if (env.acesso3.first == counted) {&#10;        login = env.acesso3.first;&#10;        password = env.acesso3.second;&#10;        loginName = login;&#10;    } else if (env.acesso4.first == counted) {&#10;        login = env.acesso4.first;&#10;        password = env.acesso4.second;&#10;        loginName = login;&#10;    }&#10;&#10;    auto accessToken = Requests::GetAccessToken(login, password);&#10;    if (!accessToken) {&#10;        std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Error getting token for CPF &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;        return;&#10;    }&#10;    std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Got access token for CPF: &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;&#10;    auto responseContent = Requests::GetApiReturn(accessToken-&gt;AuthenticationResult.AccessToken, cpf, env.apikey);&#10;    if (!responseContent) {&#10;        std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Error calling API for CPF &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;        return;&#10;    }&#10;    std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] API call successful for CPF: &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;&#10;    std::string nome, numero;&#10;    try {&#10;        auto consultas = db_search.fetchConsultas(&amp;db_storm, cpf);&#10;        if (consultas) {&#10;            nome = consultas-&gt;nome;&#10;            numero = consultas-&gt;numero;&#10;            std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Found nome/numero for CPF &quot; &lt;&lt; cpf &lt;&lt; &quot;: &quot; &lt;&lt; nome &lt;&lt; &quot; / &quot; &lt;&lt; numero &lt;&lt; std::endl;&#10;        } else {&#10;            std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] No nome/numero found for CPF &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;        }&#10;    } catch (...) {&#10;        std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Error fetching nome/numero for CPF &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;    }&#10;&#10;    std::string saldo;&#10;    std::string aviso;&#10;    bool erro = false;&#10;    if (responseContent-&gt;Simulacoes) {&#10;        saldo = responseContent-&gt;Simulacoes-&gt;ValorLiberado;&#10;    }&#10;    if (responseContent-&gt;Avisos &amp;&amp; !responseContent-&gt;Avisos-&gt;empty()) {&#10;        aviso = responseContent-&gt;Avisos-&gt;at(0).Aviso;&#10;    }&#10;    if (responseContent-&gt;Error) {&#10;        erro = *(responseContent-&gt;Error);&#10;    }&#10;&#10;    Insert inserter(env.db_consultas);&#10;    try {&#10;        inserter.insertConsultaLog(cpf, saldo, aviso, loginName, nome, numero, erro);&#10;        std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Inserted consulta log for CPF &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;    } catch (...) {&#10;        std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Error inserting consulta log for CPF &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;    }&#10;&#10;    try {&#10;        inserter.updateConsultado(cpf, env.campanha);&#10;        std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] CPF &quot; &lt;&lt; cpf &lt;&lt; &quot; marked as processed&quot; &lt;&lt; std::endl;&#10;    } catch (...) {&#10;        std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Error marking as processed for CPF &quot; &lt;&lt; cpf &lt;&lt; std::endl;&#10;    }&#10;&#10;    auto end = std::chrono::system_clock::now();&#10;    std::clog &lt;&lt; &quot;[&quot; &lt;&lt; std::put_time(std::localtime(&amp;now), &quot;%FT%T&quot;) &lt;&lt; &quot;] [WORKER] Finished processing CPF: &quot; &lt;&lt; cpf &lt;&lt; &quot; in &quot; &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end - start).count() &lt;&lt; &quot;ms&quot; &lt;&lt; std::endl;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>